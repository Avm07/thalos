package msgpack

import (
	"encoding/hex"
	"encoding/json"
	"testing"

	"github.com/eosswedenorg/thalos/api/message"
	"github.com/shamaton/msgpack/v2"
	"github.com/stretchr/testify/assert"
)

func TestMsgpack_EncodeActionTrace(t *testing.T) {
	RegisterGeneratedResolver()

	dataJson, err := json.Marshal(map[string]interface{}{
		"item": map[string]interface{}{
			"id":   "2131242",
			"name": "Great Sword",
			"str":  "100",
			"agi":  "20",
			"dur":  "100",
			"qual": "epic",
		},
		"from":   "account1",
		"to":     "account2",
		"amount": "1000.0000 SCAM",
	})

	assert.NoError(t, err)

	msg := message.ActionTrace{
		TxID:     "edc06dce6320459fd644756972048da453b2816b0a434c37ddffde36778dcab3",
		Name:     "sellitem",
		Contract: "mygame",
		Receiver: "eosio",
		Data:     dataJson,
		HexData:  "d0fa1b2ab8a6fd0d1b0173df91aa9ffd277642d05780cf750",
	}

	data, err := msgpack.Marshal(msg)
	assert.NoError(t, err)

	expected := []byte{
		0x86, 0xa5, 0x74, 0x78, 0x5f, 0x69, 0x64, 0xd9,
		0x40, 0x65, 0x64, 0x63, 0x30, 0x36, 0x64, 0x63,
		0x65, 0x36, 0x33, 0x32, 0x30, 0x34, 0x35, 0x39,
		0x66, 0x64, 0x36, 0x34, 0x34, 0x37, 0x35, 0x36,
		0x39, 0x37, 0x32, 0x30, 0x34, 0x38, 0x64, 0x61,
		0x34, 0x35, 0x33, 0x62, 0x32, 0x38, 0x31, 0x36,
		0x62, 0x30, 0x61, 0x34, 0x33, 0x34, 0x63, 0x33,
		0x37, 0x64, 0x64, 0x66, 0x66, 0x64, 0x65, 0x33,
		0x36, 0x37, 0x37, 0x38, 0x64, 0x63, 0x61, 0x62,
		0x33, 0xa4, 0x6e, 0x61, 0x6d, 0x65, 0xa8, 0x73,
		0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x6d, 0xa8,
		0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
		0xa6, 0x6d, 0x79, 0x67, 0x61, 0x6d, 0x65, 0xa8,
		0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
		0xa5, 0x65, 0x6f, 0x73, 0x69, 0x6f, 0xa4, 0x64,
		0x61, 0x74, 0x61, 0xc4, 0x9b, 0x7b, 0x22, 0x61,
		0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x22,
		0x31, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30,
		0x30, 0x20, 0x53, 0x43, 0x41, 0x4d, 0x22, 0x2c,
		0x22, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x3a, 0x22,
		0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x31,
		0x22, 0x2c, 0x22, 0x69, 0x74, 0x65, 0x6d, 0x22,
		0x3a, 0x7b, 0x22, 0x61, 0x67, 0x69, 0x22, 0x3a,
		0x22, 0x32, 0x30, 0x22, 0x2c, 0x22, 0x64, 0x75,
		0x72, 0x22, 0x3a, 0x22, 0x31, 0x30, 0x30, 0x22,
		0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x32,
		0x31, 0x33, 0x31, 0x32, 0x34, 0x32, 0x22, 0x2c,
		0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22,
		0x47, 0x72, 0x65, 0x61, 0x74, 0x20, 0x53, 0x77,
		0x6f, 0x72, 0x64, 0x22, 0x2c, 0x22, 0x71, 0x75,
		0x61, 0x6c, 0x22, 0x3a, 0x22, 0x65, 0x70, 0x69,
		0x63, 0x22, 0x2c, 0x22, 0x73, 0x74, 0x72, 0x22,
		0x3a, 0x22, 0x31, 0x30, 0x30, 0x22, 0x7d, 0x2c,
		0x22, 0x74, 0x6f, 0x22, 0x3a, 0x22, 0x61, 0x63,
		0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x22, 0x7d,
		0xa8, 0x68, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74,
		0x61, 0xd9, 0x31, 0x64, 0x30, 0x66, 0x61, 0x31,
		0x62, 0x32, 0x61, 0x62, 0x38, 0x61, 0x36, 0x66,
		0x64, 0x30, 0x64, 0x31, 0x62, 0x30, 0x31, 0x37,
		0x33, 0x64, 0x66, 0x39, 0x31, 0x61, 0x61, 0x39,
		0x66, 0x66, 0x64, 0x32, 0x37, 0x37, 0x36, 0x34,
		0x32, 0x64, 0x30, 0x35, 0x37, 0x38, 0x30, 0x63,
		0x66, 0x37, 0x35, 0x30,
	}

	assert.Equal(t, expected, data)
}

func TestMsgpack_Decode(t *testing.T) {
	RegisterGeneratedResolver()

	data := []byte("\x86\xa5tx_id\xd9@edc06dce6320459fd644756972048da453b2816b0a434c37ddffde36778dcab3\xa4name\xa4drop\xa8contract\xa6mygame\xa8receiver\xa8account1\xa4dataÄ‹{\"dropped_from_id\":674562,\"item\":{\"dur\":145,\"id\":49623,\"name\":\"Shadowmourne\",\"qual\":\"legendary\",\"sta\":198,\"str\":223},\"receiver\":\"account1\"}\xa8hex_data\xda\x01\x167b2264726f707065645f66726f6d5f6964223a3637343536322c226974656d223a7b22647572223a3134352c226964223a34393632332c226e616d65223a22536861646f776d6f75726e65222c227175616c223a226c6567656e64617279222c22737461223a3139382c22737472223a3232337d2c227265636569766572223a226163636f756e7431227d")

	dataJson, err := json.Marshal(map[string]interface{}{
		"item": map[string]interface{}{
			"id":   49623,
			"name": "Shadowmourne",
			"str":  223,
			"sta":  198,
			"dur":  145,
			"qual": "legendary",
		},
		"dropped_from_id": 674562,
		"receiver":        "account1",
	})

	assert.NoError(t, err)

	expected := message.ActionTrace{
		TxID:     "edc06dce6320459fd644756972048da453b2816b0a434c37ddffde36778dcab3",
		Name:     "drop",
		Contract: "mygame",
		Receiver: "account1",
		Data:     dataJson,
		HexData:  hex.EncodeToString(dataJson),
	}

	res := message.ActionTrace{}
	err = msgpack.Unmarshal(data, &res)
	assert.NoError(t, err)

	assert.Equal(t, expected, res)
}

func TestMsgpack_EncodeHeartbeat(t *testing.T) {
	RegisterGeneratedResolver()

	msg := message.HeartBeat{
		BlockNum:                 1234,
		HeadBlockNum:             1235,
		LastIrreversibleBlockNum: 1236,
	}

	data, err := msgpack.Marshal(msg)
	assert.NoError(t, err)

	assert.Equal(t, data, []byte{0x83, 0xa8, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0xcd, 0x4, 0xd2, 0xad, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0xcd, 0x4, 0xd3, 0xba, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0xcd, 0x4, 0xd4})
}

func TestMsgpack_DecodeHeartbeat(t *testing.T) {
	data := []byte{0x83, 0xa8, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0xcd, 0x03, 0xe8, 0xad, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0xcd, 0x0b, 0xb8, 0xba, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0xcd, 0x04, 0x06}

	expected := message.HeartBeat{
		BlockNum:                 1000,
		HeadBlockNum:             3000,
		LastIrreversibleBlockNum: 1030,
	}

	msg := message.HeartBeat{}
	err := msgpack.Unmarshal(data, &msg)
	assert.NoError(t, err)
	assert.Equal(t, expected, msg)
}
