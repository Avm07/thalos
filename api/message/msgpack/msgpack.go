// Code generated by msgpackgen. DO NOT EDIT.

package msgpack

import (
	"fmt"
	message "github.com/eosswedenorg/thalos/api/message"
	msgpack "github.com/shamaton/msgpackgen/msgpack"
	dec "github.com/shamaton/msgpackgen/msgpack/dec"
	enc "github.com/shamaton/msgpackgen/msgpack/enc"
)

// RegisterGeneratedResolver registers generated resolver.
func RegisterGeneratedResolver() {
	msgpack.SetResolver(___encodeAsMap, ___encodeAsArray, ___decodeAsMap, ___decodeAsArray)
}

// encode
func ___encode(i interface{}) ([]byte, error) {
	if msgpack.StructAsArray() {
		return ___encodeAsArray(i)
	} else {
		return ___encodeAsMap(i)
	}
}

// encodeAsArray
func ___encodeAsArray(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case message.HeartBeat:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/eosswedenorg/thalos/api/message.HeartBeat", size, offset)
		}
		return b, err
	case *message.HeartBeat:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/eosswedenorg/thalos/api/message.HeartBeat", size, offset)
		}
		return b, err
	}
	return nil, nil
}

// encodeAsMap
func ___encodeAsMap(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case message.HeartBeat:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/eosswedenorg/thalos/api/message.HeartBeat", size, offset)
		}
		return b, err
	case *message.HeartBeat:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/eosswedenorg/thalos/api/message.HeartBeat", size, offset)
		}
		return b, err
	}
	return nil, nil
}

// decode
func ___decode(data []byte, i interface{}) (bool, error) {
	if msgpack.StructAsArray() {
		return ___decodeAsArray(data, i)
	} else {
		return ___decodeAsMap(data, i)
	}
}

// decodeAsArray
func ___decodeAsArray(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *message.HeartBeat:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **message.HeartBeat:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, nil
}

// decodeAsMap
func ___decodeAsMap(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *message.HeartBeat:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **message.HeartBeat:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, nil
}

// calculate size from github.com/eosswedenorg/thalos/api/message.HeartBeat
func ___calcArraySizeHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v message.HeartBeat, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcUint32(v.BlockNum)
	size += encoder.CalcUint32(v.HeadBlockNum)
	size += encoder.CalcUint32(v.LastIrreversibleBlockNum)
	return size, nil
}

// calculate size from github.com/eosswedenorg/thalos/api/message.HeartBeat
func ___calcMapSizeHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v message.HeartBeat, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcUint32(v.BlockNum)
	size += encoder.CalcStringFix(12)
	size += encoder.CalcUint32(v.HeadBlockNum)
	size += encoder.CalcStringFix(24)
	size += encoder.CalcUint32(v.LastIrreversibleBlockNum)
	return size, nil
}

// encode from github.com/eosswedenorg/thalos/api/message.HeartBeat
func ___encodeArrayHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v message.HeartBeat, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(3, offset)
	offset = encoder.WriteUint32(v.BlockNum, offset)
	offset = encoder.WriteUint32(v.HeadBlockNum, offset)
	offset = encoder.WriteUint32(v.LastIrreversibleBlockNum, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/eosswedenorg/thalos/api/message.HeartBeat
func ___encodeMapHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v message.HeartBeat, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(3, offset)
	offset = encoder.WriteStringFix("BlockNum", 8, offset)
	offset = encoder.WriteUint32(v.BlockNum, offset)
	offset = encoder.WriteStringFix("HeadBlockNum", 12, offset)
	offset = encoder.WriteUint32(v.HeadBlockNum, offset)
	offset = encoder.WriteStringFix("LastIrreversibleBlockNum", 24, offset)
	offset = encoder.WriteUint32(v.LastIrreversibleBlockNum, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/eosswedenorg/thalos/api/message.HeartBeat
func ___decodeArrayHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v *message.HeartBeat, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv uint32
		vv, offset, err = decoder.AsUint32(offset)
		if err != nil {
			return 0, err
		}
		v.BlockNum = vv
	}
	{
		var vv uint32
		vv, offset, err = decoder.AsUint32(offset)
		if err != nil {
			return 0, err
		}
		v.HeadBlockNum = vv
	}
	{
		var vv uint32
		vv, offset, err = decoder.AsUint32(offset)
		if err != nil {
			return 0, err
		}
		v.LastIrreversibleBlockNum = vv
	}
	return offset, err
}

// decode to github.com/eosswedenorg/thalos/api/message.HeartBeat
func ___decodeMapHeartBeat_27424f445a2085e7723342fb0df638c626b43c59240988bc64f2d60167ee4080(v *message.HeartBeat, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x42), uint8(0x6c), uint8(0x6f), uint8(0x63), uint8(0x6b), uint8(0x4e), uint8(0x75), uint8(0x6d)},                                                                                                                                                                                                                 // BlockNum
		{uint8(0x48), uint8(0x65), uint8(0x61), uint8(0x64), uint8(0x42), uint8(0x6c), uint8(0x6f), uint8(0x63), uint8(0x6b), uint8(0x4e), uint8(0x75), uint8(0x6d)},                                                                                                                                                             // HeadBlockNum
		{uint8(0x4c), uint8(0x61), uint8(0x73), uint8(0x74), uint8(0x49), uint8(0x72), uint8(0x72), uint8(0x65), uint8(0x76), uint8(0x65), uint8(0x72), uint8(0x73), uint8(0x69), uint8(0x62), uint8(0x6c), uint8(0x65), uint8(0x42), uint8(0x6c), uint8(0x6f), uint8(0x63), uint8(0x6b), uint8(0x4e), uint8(0x75), uint8(0x6d)}, // LastIrreversibleBlockNum
	}
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 3 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			{
				var vv uint32
				vv, offset, err = decoder.AsUint32(offset)
				if err != nil {
					return 0, err
				}
				v.BlockNum = vv
			}
			count++
		case 1:
			{
				var vv uint32
				vv, offset, err = decoder.AsUint32(offset)
				if err != nil {
					return 0, err
				}
				v.HeadBlockNum = vv
			}
			count++
		case 2:
			{
				var vv uint32
				vv, offset, err = decoder.AsUint32(offset)
				if err != nil {
					return 0, err
				}
				v.LastIrreversibleBlockNum = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}
